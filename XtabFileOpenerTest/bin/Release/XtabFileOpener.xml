<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XtabFileOpener</name>
    </assembly>
    <members>
        <member name="T:XtabFileOpener.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:XtabFileOpener.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:XtabFileOpener.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:XtabFileOpener.Properties.Resources.TestFile">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.CExcelAdapter.waitForRealClosing">
            <summary>
            waits until the Excel workbook is really closed 
            (when the WorkbookDeactivate-event is fired, the application is not yet closed completely)
            </summary>
        </member>
        <member name="T:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.applyChanges">
            <summary>
            delegate that can be called when a spreadsheet was changed
            </summary>
            <param name="tableContainer"></param>
        </member>
        <member name="T:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.spreadsheetClosed">
            <summary>
            delegate that can be called when the spreadsheet is closed
            </summary>
        </member>
        <member name="T:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter">
            <summary>
            describes the composition of a class that allows interacting with a spreadsheet
            </summary>
        </member>
        <member name="E:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.save">
            <summary>
            event that is raised when the spreadsheet is saved
            </summary>
        </member>
        <member name="E:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.closed">
            <summary>
            event that is raised when the spreadsheet is closed
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.createSpreadsheet(System.String)">
            <summary>
            creates a new spreadsheet
            </summary>
            <param name="name">name of the spreadsheet</param>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.closeSpreadsheet">
            <summary>
            closes the spreadsheet
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.destroySpreadsheet">
            <summary>
            destroys the spreadsheet permanently
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.saveSpreadsheet">
            <summary>
            saves the spreadsheet to a file
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.startListeningToSaving">
            <summary>
            starts listening to the the workbook being saved
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.startListeningToClosing">
            <summary>
            starts listening to the workbook being closed
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.show">
            <summary>
            sets the workbook visible to the user
            </summary>
        </member>
        <member name="P:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.SheetCount">
            <summary>
            number of sheets in this spreadsheet
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.addSheetBehind(System.String)">
            <summary>
            adds a new sheet to the workbook
            </summary>
            <param name="name">name of the new sheet</param>
            <returns>number of the new sheet, beginning at 0</returns>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.setContentOfSheet(System.Int32,System.String[0:,0:],System.Boolean)">
            <summary>
            sets the content of a sheet in the workbook; if the sheet is not empty, all concerned cells are overridden
            </summary>
            <param name="number">number of the sheet, beginning at 0</param>
            <param name="content">new content of the sheet</param>
            <param name="autosize">whether the columns in the sheet should adapt their width to the new content</param>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.deleteSheet(System.Int32)">
            <summary>
            deletes a sheet
            </summary>
            <param name="number">number of the sheet that should be deleted, beginning at 0</param>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.activateSheet(System.Int32)">
            <summary>
            sets a sheet to the active one
            </summary>
            <param name="number">number of the sheet that should be activated, beginning at 0</param>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.renameSheet(System.Int32,System.String)">
            <summary>
            renames a sheet in the workbook
            </summary>
            <param name="number">number of the sheet, that should be renamed</param>
            <param name="name">new name of the sheet</param>
        </member>
        <member name="P:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.tableContainer">
            <summary>
            TableContainer that represents this spreadsheet
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ISpreadsheetAdapter.createTableContainer">
            <summary>
            creates the TableContainer
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.CColumns">
            <summary>
            represents the columns of a database table
            </summary>
        </member>
        <member name="M:XtabFileOpener.TableContainer.CColumns.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            enables iterating over the columns
            </summary>
            <returns></returns>
        </member>
        <member name="P:XtabFileOpener.TableContainer.CColumns.Exists">
            <summary>
            checks whether these columns exist; if they are not existing, the corresponding table has no column definition
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.CRow">
            <summary>
            represents a row (a record) of a database table
            </summary>
        </member>
        <member name="M:XtabFileOpener.TableContainer.CRow.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            enables iterating over the values in the row
            </summary>
            <returns></returns>
        </member>
        <member name="T:XtabFileOpener.TableContainer.CTable">
            <summary>
            represents a database tables
            </summary>
        </member>
        <member name="M:XtabFileOpener.TableContainer.CTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            enables iterating over the rows of this table excluding the row with the column names
            </summary>
            <returns></returns>
        </member>
        <member name="P:XtabFileOpener.TableContainer.CTable.Width">
            <summary>
            number of columns of the table
            </summary>
        </member>
        <member name="P:XtabFileOpener.TableContainer.CTable.Height">
            <summary>
            number of rows of the table including the row with the column names
            </summary>
        </member>
        <member name="P:XtabFileOpener.TableContainer.CTable.maxWidth">
            <summary>
            Length of the longest row, including the columns
            </summary>
        </member>
        <member name="M:XtabFileOpener.TableContainer.CTable.toArray">
            <summary>
            creates a string array of this table, including the column names
            </summary>
            <returns></returns>
        </member>
        <member name="P:XtabFileOpener.TableContainer.CTable.Empty">
            <summary>
            checks whether the table is empty
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.CTableContainer">
            <summary>
            Represents a container of database tables
            </summary>
        </member>
        <member name="M:XtabFileOpener.TableContainer.CTableContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            enables iterating over the tables of this container
            </summary>
            <returns></returns>
        </member>
        <member name="P:XtabFileOpener.TableContainer.CTableContainer.Count">
            <summary>
            number of the tables
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.ExcelTableContainer.CExcelColumns">
            <summary>
            Implementation of CColumns, that manages the columns of an Excel table
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.ExcelTableContainer.CExcelRow">
            <summary>
            Implementation of CRow, that manages a row of an Excel table
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.ExcelTableContainer.CExcelTable">
            <summary>
            Implementation of CTable, that manages an Excel table
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.ExcelTableContainer.CExcelTableContainer">
            <summary>
            Implementation of CTableContainer, that contains Excel database tables
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.ListTableContainer.Array2D">
            <summary>
            contains static methods that are useful for handling with two dimensional arrays
            </summary>
        </member>
        <member name="M:XtabFileOpener.TableContainer.ListTableContainer.Array2D.changeArraySize(System.String[0:,0:],System.Int32,System.Int32)">
            <summary>
            creates a new array from an exisiting array with new dimensions
            </summary>
            <param name="array">old array</param>
            <param name="height">new height</param>
            <param name="width">new width</param>
            <returns>new array</returns>
        </member>
        <member name="M:XtabFileOpener.TableContainer.ListTableContainer.Array2D.addRowToArray(System.String[0:,0:],System.String[])">
            <summary>
            creates a new array from an existing array, that has one more row
            </summary>
            <param name="array">old array</param>
            <param name="row">row that should be added</param>
            <returns>new array</returns>
        </member>
        <member name="T:XtabFileOpener.TableContainer.ListTableContainer.CListTableContainer">
            <summary>
            TableContainer that manages its tables using lists
            </summary>
        </member>
        <member name="M:XtabFileOpener.TableContainer.ListTableContainer.CListTableContainer.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String[0:,0:]}})">
            <summary>
            
            </summary>
            <param name="_name">name of the TableContainer</param>
            <param name="_tables">tables of the TableContainer</param>
        </member>
        <member name="T:XtabFileOpener.XtabFile.SpreadsheetHandler">
            <summary>
            enables open the tables with a program that can show and edit tables
            </summary>
        </member>
        <member name="M:XtabFileOpener.XtabFile.SpreadsheetHandler.open">
            <summary>
            opens the spreadsheet
            </summary>
        </member>
        <member name="M:XtabFileOpener.XtabFile.SpreadsheetHandler.createWorkbookFromTableContainer(XtabFileOpener.TableContainer.CTableContainer,System.Boolean)">
            <summary>
            creates the workbook out of the TableContainer
            </summary>
            <param name="tableContainer">the TableContainer that should the workbook be created with</param>
            <param name="autoSize">defines whether the column width should be autosized</param>
        </member>
        <member name="M:XtabFileOpener.XtabFile.SpreadsheetHandler.waitForClosing">
            <summary>
            lets the current thread wait until the Excel workbook is closed
            </summary>
        </member>
        <member name="T:XtabFileOpener.XtabFile.CTableConOpener">
            <summary>
            enables opening an xtab-file by coordinating the class xtabFile and ExcelHandler
            </summary>
        </member>
    </members>
</doc>
